<snippet>
  <content><![CDATA[
#include<bits/stdc++.h>
using namespace std;

#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds; 

#define endl '\n'
#define F first
#define S second
#define PB push_back
#define EB emplace_back
#define MP make_pair

template <typename T> ostream& operator << (ostream& os, const vector<T>& vec) { os << "[ "; for(const T &v : vec) os << v << " "; return os << "]"; }
template <typename T, typename S> ostream& operator << (ostream& os, const pair<T,S>& p) { return os << "(" << p.first << "," << p.second << ")";}
template <typename T> ostream& operator << (ostream& os, const deque<T>& dq) { os << "[ "; for(const T& v: dq) os << v << " "; return os << "]";}
template <typename T> ostream& operator <<(ostream& os, const unordered_set<T>& s) {os << "[ "; for (auto& v: s) os << v << " "; return os << "]";}
template <typename T, typename S> ostream& operator <<(ostream& os, const unordered_map<S, T>& p) {os << "[ "; for (auto& v : p) os << v << " "; return os << "]";}
template <typename T> ostream& operator <<(ostream& os, const set<T>& p) {os << "[ "; for (auto& v : p) os << v << " "; return os << "]";}
template <typename T> ostream& operator <<(ostream& os, const multiset<T>& p) {os << "[ "; for (auto& v : p) os << v << " "; return os << "]";}
template <typename T, typename S>ostream& operator <<(ostream& os, const map<T, S>& p) {os << "[ "; for (auto& v : p) os << v << " "; return os << "]";}

template <typename T, typename S> pair<T,S> operator+(const pair<T,S>& a, const pair<T,S>& b){ return {a.first + b.first, a.second + b.second}; }

const int MOD = 1000000007;
const int INF = 1e9;
const long double EPS = 1e-9;

typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef pair<int,int> pii;
typedef vector<pii> vpii;
typedef tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> ordered_set;

ll binpow(ll b,ll p,ll mod = MOD){ll ans=1;b%=mod;for(;p;p>>=1){if(p&1)ans=ans*b%mod;b=b*b%mod;}return ans;}

pii dirs[] = { {0,1}, {0,-1}, {1,0}, {-1,0} };


void solve()
{
    ${1}
}

signed main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
   
    // #ifndef ONLINE_JUDGE
    // freopen(“input.txt”, “r”, stdin);  
    // freopen(“output.txt”, “w”, stdout);
    // #endif

    int t=1;
    cin>>t;

    while(t--)
      solve();

    return 0;
}
]]></content>
  <tabTrigger>cpp_common</tabTrigger>
  <description>Commonly used CPP snippet</description>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <!-- <scope >source.python</scope > -->
</snippet>
